:root{--gray-3:#dee2e6;--gray-9:#212529;--gray-7:#495057;--red-9:#c92a2a;--brown-6:#a87c56;--green-9:#2b8a3e;--yellow-6:#fab005;--indigo-6:#4c6ef5;--size-1:.25rem;--size-5:1.5rem;--size-4:1.25rem;--size-2:.5rem;--size-3:1rem;--size-7:2rem;--layer-important:2147483647;--default:red;--brand-color:#0a2c4c;--accent-color:#f7640f;--primary-bg-color:var(--default);--secondary-bg-color:var(--default);--page-bg-color:#dedede;--pre-bg-color:color-mix(in srgb,var(--page-bg-color),#000 10%);--code-bg-color:color-mix(in srgb,var(--page-bg-color),#000 5%);--header-bg-color:#fff;--footer-bg-color:#2b2b2b;--nav-bg-color:var(--gray-3);--nav-bg-color-hover:color-mix(in srgb,var(--nav-bg-color),#fff 25%);--nav-color:var(--gray-9);--nav-item-hover-bg-color:var(--gray-7);--sidebar-bg-color:#ebebeb;--anchor-text-color:var(--default);--anchor-underline-color:var(--accent-color);--anchor-hover-color:var(--default);--button-bg-color:var(--default);--button-text-color:var(--default);--menu-active-bg-color:var(--default);--menu-bg-color:var(--default);--text-color:#191818;--text-color-light:#f5f5f5;--text-color-light-dim:color-mix(in srgb,var(--text-color-light),#000 30%);--danger-bg-color:var(--red-9);--error-bg-color:var(--red-9);--info-bg-color:var(--brown-6);--ok-color:var(--green-9);--warning-bg-color:var(--yellow-6);--ok-cancel-color:var(--indigo-6);--small-radius:var(--size-1);--input-element-spacing:var(--size-5);--space-after-h1:var(--size-4);--paragraph-spacing:var(--size-2);--paragraph-text-size:1.125rem;--max-width:90ch}*,:after,:before{box-sizing:border-box;margin:0;padding:0}html{-moz-text-size-adjust:none;-webkit-text-size-adjust:none;text-size-adjust:none;scroll-behavior:smooth}body:has(dialog[open]){overflow:hidden}body,h1{margin:0}body{line-height:1.5;min-height:100vh}h1{line-height:1.1;text-wrap:balance}:where(a:not([class])){color:var(--text-color);text-decoration:underline;text-decoration-color:var(--accent-color);text-decoration-skip-ink:auto;text-decoration-style:solid;text-decoration-thickness:1px;text-underline-offset:.3rem}:where(a:not([class]):hover){text-decoration-thickness:4px}:where(button.fake-anchor){background-color:transparent;border:none;color:var(--text-color);cursor:pointer;text-align:left;text-decoration:underline;text-decoration-color:var(--accent-color);text-decoration-skip-ink:auto;text-decoration-style:solid;text-decoration-thickness:1px;text-underline-offset:.3rem}:where(strong){font-weight:600}:where(pre){background-color:var(--pre-bg-color);border-radius:var(--small-radius);margin-bottom:1rem;padding-block:.7rem;padding-inline:.7rem}:where(code):not(pre>code){font-style:italic;font-weight:500}:where(button.fake-anchor:hover){text-decoration-thickness:4px}:where(ul,ol){list-style:none}body{background-color:var(--page-bg-color);color:var(--text-color);font-family:system-ui,Atkinson Hyperlegible,sans-serif}h1{color:navy}
/*# sourceMappingURL=data:application/json;base64, */