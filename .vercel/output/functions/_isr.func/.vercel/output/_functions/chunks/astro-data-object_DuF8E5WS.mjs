const id = "astro-data-object.mdx";
						const collection = "posts";
						const slug = "astro-data-object";
						const body = "\r\nAstro provides two ways to collect document content:\r\n\r\n1. `Astro.glob`\r\n2. getCollection from Astro:content\r\n\r\nConfoundingly, each represents content data differently.\r\n\r\n## Astro.glob\r\n\r\nThe code below `Astro.glob` fetches the `posts` content collection. The argument passed to `Astro.glob` must a be string literal.\r\n\r\n```\r\nconst posts = await Astro.glob(\"../content/posts/*.mdx\");\r\n```\r\n\r\nThe code above fetches `.mdx` files, but you could get both Markdown and mdx files with the `*.md?` file selector.\r\n\r\n`Astro.glob` returns this object as one of the elements of the content data:\r\n\r\n```js\r\n{\r\n  frontmatter: [Getter],\r\n  getHeadings: [Getter],\r\n  __usesAstroImage: [Getter],\r\n  url: [Getter],\r\n  file: [Getter],\r\n  Content: [Getter],\r\n  default: [Function: Content] {\r\n    moduleId: 'C:/Users/thumb/Documents/Projects/astro-4/blog-again/src/content/posts/_template.mdx',\r\n    [Symbol(mdx-component)]: true,\r\n    [Symbol(astro.needsHeadRendering)]: false\r\n  },\r\n  [Symbol(Symbol.toStringTag)]: 'Module'\r\n}\r\n```\r\n\r\n## getCollection\r\n\r\nThe code below fetches a content collection with `getCollection.` It's a little more flexible than `Astro.glob` because\r\nit isn't location-specific, it fetches the content collection requested.\r\n\r\n```js\r\nimport { getCollection } from \"astro:content\";\r\nconst posts = await getCollection(\"posts\");\r\n```\r\n\r\n`getCollection` returns this as one of the elements of the content data:\r\n\r\n```js\r\n{\r\n  id: 'astro-notes.mdx',\r\n  slug: 'astro-notes',\r\n  body: '[body]',\r\n  collection: 'posts',\r\n  data: {\r\n    title: 'Astro notes',\r\n    description: 'Astro notes',\r\n    tags: [ 'astro' ],\r\n    date_published: 2023-04-16T00:00:00.000Z,\r\n    date_added: 2023-04-16T00:00:00.000Z,\r\n    date_updated: 2023-04-16T00:00:00.000Z,\r\n    draft: false\r\n  },\r\n  render: [AsyncFunction: render]\r\n}\r\n```\r\n\r\n##\r\n\r\nBecause these two methods return distinct object structures, helpers like content filters and queries must be object-specific.\r\nBoth are wrappers around Vite's `glob` function so their performance is similar.\r\n\r\nAlthough `getCollection` requires an import, I use it exclusively to fetch content collections. The helper function makes it easy\r\nto get all the data needed from the a content collection member to list it.\r\n\r\n```js\r\nexport function getContentData(obj) {\r\n  return {\r\n    title: obj.data.title,\r\n    description: obj.data.description,\r\n    date_published: obj.data.date_published || \"N/A\",\r\n    slug: `/${obj.collection}/${obj.slug}`,\r\n  };\r\n}\r\n```\r\n\r\nMy convention is that if `data_published` is `null`, then\r\nthe document is a draft otherwise it's been published. If it\r\nis a draft document `getContentData` returns \"N/A.\"\r\n\r\nThe example below shows an Astro component that emits the HTML needed to the content collection member in a list.\r\nIt receives a single post as a post as a property and then uses `getContentData` to get the values needed to list the document.\r\n\r\n```js\r\n---\r\nimport { getContentData } from \"$scripts/utils.js\";\r\n\r\nconst { post } = Astro.props;\r\nconst { title, description, date_published, slug } = getContentData(post);\r\n---\r\n\r\n<div class=\"post-detail\">\r\n  <a href={`${slug}`}>\r\n    {title}\r\n    <div class=\"post-description\">\r\n      {date_published == \"N/A\" && <span class=\"draft-post-tag\">Draft</span>}\r\n      {date_published != \"N/A\" && `${formatDate(date_published)}`}\r\n      {description}\r\n    </div>\r\n  </a>\r\n</div>\r\n```\r\n";
						const data = {title:"Astro.glob versus getCollection",description:"Astro.glob provides two ways to collect document content. Pick one, don't mix 'n match.",tags:["astro"],date_published:new Date(1713537663000),date_added:new Date(1713531904000),date_updated:new Date(1713531906000),pinned:false};
						const _internal = {
							type: 'content',
							filePath: "C:/Users/thumb/Documents/Projects/astro-4/blog-again/src/content/posts/astro-data-object.mdx",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
